<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Article extends A {        private $_attach_dir;    private $_curruid;    private $_prepage = 10;    public function __construct() {        parent::__construct();                $this->_curruid     = (int) $this->auth->user('uid');        $this->_attach_dir  = config_item('site_attach_dir') . DIRECTORY_SEPARATOR;        if ( @is_dir($this->_attach_dir) === FALSE ) {            create_dir($this->_attach_dir);        }    }        public function index($type = 'all', $start = 0) {        switch ($type) {            case 'draft':                $where = array('state'=>0); break;            case 'publish':                $where = array('state'=>1); break;            case 'trash':                $where = array('state'=>2); break;            default:                $where = array('state !='=>2);        };                $data['type'] = in_array($type, array('all', 'publish', 'trash', 'draft')) ? $type : 'all';            $this->load->library('pagination');        $config['base_url']     = admin_base_url('article/' . $data['type']);        $config['total_rows']   = $this->article_model->get_rows($where);        $config['per_page']     = $this->_prepage;        $config['num_links']    = 5;        $config['uri_segment']	= 4;        $config['suffix']       = config_item('url_suffix');        $this->pagination->initialize($config);                 $data['pres'] = $this->_prepage;        $data['page'] = $this->pagination->create_links();        $data['rows'] = $config['total_rows'];        $data['list'] = $this->article_model->get_list($start, $config['per_page'], $where);        $this->load->view('admin_article', $data);    }        public function create() {        $data['category'] = $this->category_model->get_list(0, 100);        $this->load->view('admin_article_create', $data);    }        public function update($aid = 0) {        $data['article'] = $this->article_model->get_info(array('aid'=>$aid));        if( ! $data['article'] ) {            show_404();        }                $data['category'] = $this->category_model->get_list(0, 100);        $this->load->view('admin_article_update', $data);    }    public function crop_image() {        $this->load->view('admin_article_image');    }        public function crop_image_action() {        $x  = (int) $this->input->get('x');		$y  = (int) $this->input->get('y');		$w  = (int) $this->input->get('w');		$h  = (int) $this->input->get('h');                if( $w < 160 OR $h < 120 ) {            JSON('error', '请选择一个合适的图像区域！');        }                $aid = (int) $this->input->get('aid');                $imagepath = $this->input->get('path', true);        $imagepath = FCPATH . str_replace(base_url(), '', $imagepath);                if( empty($imagepath) OR (@is_file($imagepath) === false) ) {            JSON('error', '找不到需要裁切的图片！');        }                $imageinfo = pathinfo($imagepath);        switch( $imageinfo['extension'] ) {            case 'jpg':            case 'jpeg':                $image = imagecreatefromjpeg($imagepath);                break;            case 'png':                $image = imagecreatefrompng($imagepath);                break;            case 'gif':                $image = imagecreatefromgif($imagepath);                break;            default:                JSON('error', '您上传的文件格式不正确！');        }        $copy = $this->_image_crop($image, $x, $y, $w, $h);                if( $copy === false ) JSON('error', '未知错误，请重试！');		        $temppath = FCPATH . $this->_attach_dir . 'article' . DIRECTORY_SEPARATOR . build_dir($aid);		        if( @is_dir($temppath) === false ) {            create_dir($temppath);        }                if ( @is_writable($temppath) === false ) {            @chmod($temppath, 0777);        }		$savepath = $temppath . $aid . '.png';                imagepng($copy, $savepath);                imagedestroy($copy);		$this->load->library('image_lib');		        list($width, $height, $type, $attr) = getimagesize($savepath);                $array = array( array('w'=>160, 'h'=>120), array('w'=>48, 'h'=>36) );		foreach($array AS $size) {                        if($width > $size['w'] OR $height > $size['h']) {                $setwidth = $size['w'];                $setheight = $size['h'];            } else {                $setwidth = $width;                $setheight = $height;            }        			$config['source_image'] = $savepath;			$config['new_image']    = $aid . '_' . $size['w'] . '.png';			$config['height']       = $setheight;            $config['width']        = $setwidth;			$this->image_lib->initialize($config);			$this->image_lib->resize();		}		        unlink($imagepath);		unlink($savepath);        JSON('success', '头图已保存成功！', get_article_image($aid, 48));    }        public function create_action() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }        $cid            = (int) $this->input->post('cid');        $index          = (int) $this->input->post('index');        $from           = $this->input->post('fromurl', true);        $title          = $this->input->post('title', true);        $keyword        = $this->input->post('keyword', true);        $description    = $this->input->post('description', true);        $content        = $this->input->post('content');        $content        = strip_tags($content, '<p><a><strong><img><em><span><ul><ol><li><br>');                if(trim($description) == '') {            $data['description'] = substring(strip_tags($content), 200);        } else {            $data['description'] = $description;        }        $data['cid']            = $cid;        $data['from']           = is_url($from) ? $from : '';        $data['image']          = str_exists($content, '<img src=') ? 1 : 0;        $data['title']          = trim($title);        $data['index']          = $index;        $data['keyword']        = format_keyword($keyword);        $data['content']        = htmlspecialchars($content);        $data['created']        = $data['updated'] = time();        $data['state']          = 1;                if( $data['cid'] === 0 ) {            JSON('error', '请选择文章分类！');        }                if(empty($data['title'])) {            JSON('error', '请填写文章标题！');        }                if( strip_tags($content) == '' ) {            JSON('error', '请填写文章内容！');        }                $action = $this->input->post('action', true);                switch ($action) {            case 'update':                $success    = '恭喜，文章已更新成功！';                $error      = '对不起，文章更新失败，请重试！';                break;            case 'draft':                $data['state'] = 0;                $success    = '草稿已存于 ' . date('Y年m月d H:i');                $error      = '草稿保存失败，请重试！';                break;            default:                $success    = '恭喜，文章已发布成功！';                $error      = '对不起，文章发布失败，请重试！';        };        $draft_id = (int) $this->input->post('draftid');                $state_id = $this->_create_article($draft_id, $data);                if( $state_id ) {            JSON('success', $success, $state_id);        } else {            JSON('error', $error, $state_id);        }    }        public function delete_action() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }                $aid = (int) $this->input->get('aid');                $row = $this->_delete_article($aid);                $row ? JSON('success', '恭喜，文章删除成功！') : JSON('error', '对不起，删除文章失败，请重试！');    }        public function delete_multi_action() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }                $aid = $this->input->get('aid');        $act = $this->input->get('act', true);        switch ($act) {            case 'trash':                $row = 0;                foreach($aid AS $v) {                    $this->db->update('article', array('state'=>2), array('aid'=>(int) $v));                    if( $this->db->affected_rows() ) {                        $row ++;                    }                }                JSON('success', '已成功将 ' . $row . ' 篇文章放收回收站！');                break;            case 'normal':                $row = 0;                foreach($aid AS $v) {                    $this->db->update('article', array('state'=>1), array('aid'=>(int) $v));                    if( $this->db->affected_rows() ) {                        $row ++;                    }                }                JSON('success', '已成功恢复 ' . $row . ' 篇文章！');                break;            case 'delete':                $row = 0;                foreach($aid AS $v) {                    if( $this->_delete_article($v) ) {                        $row ++;                    }                }                JSON('success', '已成功删除 ' . $row . ' 篇文章！');                break;            default:                JSON('error', '未确认的操作！');        };    }        public function delete_img_action() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }                $image = $this->input->get('image', true);                $image = FCPATH . str_replace(base_url(), '', $image);                $state = 'success';        if( @is_file($image) === true ) {            @chmod($image, 0777);            if( ! @unlink($image) ) {                $state = 'error';            }        }        JSON($state);    }        public function delete_tag_action() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }                $aid = (int) $this->input->get('aid');        $tid = (int) $this->input->get('tid');                if( ($aid === 0) OR ($tid === 0)) {            JSON('error', '数据不正确，无法删除');        }                if ( $this->tag_model->delete_by_aid($aid, $tid) ) {            JSON('success', '标签已成功删除');        } else {            JSON('error', '删除失败，请重试');        }    }        public function select_tag_relation() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }                $tag = $this->input->get('tag', true);        $tag = trim($tag);                        if( $tag === '' ) {            JSON('error');        }        $data = $this->db->like('name', $tag, 'after')->order_by('total DESC')->limit(20)->get('tag')->result();                if( ! $data ) {            JSON('error');        }                JSON('success', '', $data);    }        public function remove_to_trash() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }                $aid = (int) $this->input->get('aid');                $this->db->update('article', array('state'=>2), array('aid'=>$aid));                if( $this->db->affected_rows() ) {            JSON('success', '文章已成功移至回收站！');        } else {            JSON('error', '操作失败，请重试！');        }    }        public function return_to_normal() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }                $aid = (int) $this->input->get('aid');                $this->db->update('article', array('state'=>1), array('aid'=>$aid));                if( $this->db->affected_rows() ) {            JSON('success', '文章已恢复正常！');        } else {            JSON('error', '操作失败，请重试！');        }    }        public function _create_article($draft_id, $data) {        // create        if( $draft_id === 0 ) {            $data['uid'] = $this->_curruid;            $this->db->insert('article', $data);            unset($data);            return $this->db->insert_id();        }        // update        else {            unset($data['created']);            $this->db->update('article', $data, array('aid'=>$draft_id));            unset($data);            return $this->db->affected_rows();        }    }        public function _delete_article($aid) {            $aid = (int) $aid;                $article = $this->article_model->get_info(array('aid'=>$aid));                if( ! $article ) {            return false;        }            $this->db->delete('article', array('aid'=>$aid));        $state = $this->db->affected_rows();                if( $state ) {            // 删除文章的图片            $this->load->library('action');            $this->action->unlink_article_image($aid);            $this->action->unlink_string_attach($article->content);            // 删除文章的标签            $this->tag_model->delete_by_aid($aid);            // 删除文章的评论            // do some thing..        }                return $state ? true : false;    }        /**     * Plug-in 15: Image Crop     * This plug-in takes a GD image and returns a cropped     * version of it. If any arguments are out of the     * image bounds then FALSE is returned. The arguments     * required are:     *     * $image:   The image source     * $x & $y:  The top-left corner     * $w & $h : The width and height     *     */    public function _image_crop($image, $x, $y, $w, $h) {            $tw = imagesx($image);        $th = imagesy($image);        if ($x > $tw || $y > $th || $w > $tw || $h > $th) {            return FALSE;        }        $temp = imagecreatetruecolor($w, $h);        imagecopyresampled($temp, $image, 0, 0, $x, $y, $w, $h, $w, $h);        return $temp;    } }/* End of file article.php *//* Location: ./application/controllers/article.php */