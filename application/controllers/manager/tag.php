<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Tag extends A {        private $_prepage = 100;        public function __construct() {        parent::__construct();    }        public function index($start = 0) {        $this->load->library('pagination');        $config['base_url']     = admin_base_url('tag/all');        $config['total_rows']   = $this->tag_model->get_rows();        $config['per_page']     = $this->_prepage;        $config['num_links']    = 5;        $config['uri_segment']	= 4;        $config['suffix']       = config_item('url_suffix');        $this->pagination->initialize($config);                 $data['pres'] = $this->_prepage;        $data['page'] = $this->pagination->create_links();        $data['rows'] = $config['total_rows'];        $data['list'] = $this->tag_model->get_list($start, $config['per_page']);                $this->load->view('admin_tag', $data);    }        public function merge($tid = 0) {        $data['curr'] = (int) $tid;        $data['list'] = $this->tag_model->get_list(0, 10000);        $this->load->view('admin_tag_merge', $data);    }        public function stats() {        $this->load->view('admin_tag_stats');    }    public function create_action() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }                $aid    = (int) $this->input->get('aid');        $tag    = $this->input->get('tag', true);                if( trim($tag) === '' ) {            JSON('error', '请填写标签名称');        }                if( $this->tag_model->isset_by_aid($aid, $tag) ) {            JSON('error', '该文章已有此标签');        }                $count = (int) $this->db->where(array('aid'=>$aid))->get('relation')->num_rows();                if($count > 2) {            JSON('error', '最多添加 3 个标签');        }                $insert_tid = $this->tag_model->create_by_aid($aid, $tag);        if( $insert_tid === 0 ) {            JSON('error', '添加失败，请重试');        }                $tag = $this->tag_model->get_info(array('tid'=>$insert_tid));                $tag = array('aid'=>$aid, 'tid'=>$tag->tid, 'name'=>$tag->name, 'slug'=>$tag->slug, 'total'=>$tag->total);                JSON('success', '该标签已成功添加', $tag);    }        public function delete_action() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }                $tid = (int) $this->input->get('tid');                if( $this->tag_model->delete_by_tid($tid) ) {            JSON('success', '该标签已成功删除');        } else {            JSON('error', '删除失败，请重试');        }    }        public function merge_action() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }                $from_tid   = (int) $this->input->post('from_tid');        $merge_tid  = (int) $this->input->post('merge_tid');                if($from_tid === 0) {            JSON('error', '请选择来源标签！');        }                if($merge_tid === 0) {            JSON('error', '请选择目标标签！');        }                if($from_tid === $merge_tid) {            JSON('error', '来源标签不能和目标标签相同！');        }                $this->db->delete('tag', array('tid'=>$from_tid));        if ( $this->db->affected_rows() ) {                        $this->db->update('relation', array('tid'=>$merge_tid), array('tid'=>$from_tid));                        $this->_clear();            $this->_stats();                    JSON('success', '标签已合并成功！');        } else {            JSON('error', '合并失败，请重试！');        }    }    public function stats_action() {        if( ! $this->input->is_ajax_request() ) {            show_404();        }                $this->_clear();                $stats = $this->_stats();                JSON('success', '共计 ' . $stats['rows'] . ' 个标签，当前操作已成功更新 ' . $stats['affe'] . ' 条记录！');    }        /**     * 重新整理标签使用总计数     *      * @return array     */    public function _stats() {            $list = $this->tag_model->get_list(0, 10000);        $rows = 0;        $affe = 0;                if( $list ) {            foreach($list AS $k=>$v) {                $rows ++;                                $code = array('tid'=>$v->tid);                $rela = (int) $this->db->where($code)->get('relation')->num_rows();                $this->db->update('tag', array('total'=>$rela), $code);                                if( $this->db->affected_rows() ) {                    $affe ++;                }            }        }                return array('rows'=>$rows, 'affe'=>$affe);    }        /**     * 标签在同一文章下多次出现     *      * @return void     */    public function _clear() {        $list = $this->db->get('relation')->result();                if( $list ) {            foreach($list AS $k=>$v) {                $code = array('aid'=>$v->aid, 'tid'=>$v->tid);                $rows = (int) $this->db->where($code)->get('relation')->num_rows();                if($rows > 1) {                    $this->db->delete('relation', $code);                    $this->db->insert('relation', $code);                }            }        }    }}/* End of file tag.php *//* Location: ./application/controllers/tag.php */